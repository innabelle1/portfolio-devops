pipeline {
  agent any

  parameters {
    string(name: 'SERVICE_NAME', defaultValue: 'config-server', description: 'Name of the microservice')
    string(name: 'IMAGE_TAG', defaultValue: '', description: 'Leave empty to use BUILD_NUMBER')
  }

  environment {
    AWS_REGION      = 'us-east-1'
    ECR_REGISTRY    = '701173654142.dkr.ecr.us-east-1.amazonaws.com'
    ECR_REPO        = "${ECR_REGISTRY}/petclinic/${params.SERVICE_NAME}"
    IMAGE_TAG       = "${params.IMAGE_TAG ?: env.BUILD_NUMBER}"
    LOCAL_IMAGE     = "portfolio-devops-${params.SERVICE_NAME}:latest"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'restore-devops', url: 'https://github.com/innabelle1/portfolio-devops.git'
      }
    }

    stage('Tag Local Image for ECR') {
      steps {
        script {
          echo "Tagging $LOCAL_IMAGE -> $ECR_REPO:$IMAGE_TAG"
          sh "docker tag $LOCAL_IMAGE $ECR_REPO:$IMAGE_TAG"
        }
      }
    }

    stage('Login to ECR') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr-creds']]) {
          sh "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY"
        }
      }
    }

    stage('Push Image to ECR') {
      steps {
        sh "docker push $ECR_REPO:$IMAGE_TAG"
      }
    }

    stage('Verify Push') {
      steps {
        script {
          def check = sh(
            script: """aws ecr describe-images \
              --repository-name petclinic/${params.SERVICE_NAME} \
              --image-ids imageTag=$IMAGE_TAG \
              --region $AWS_REGION > /dev/null 2>&1""",
            returnStatus: true
          )
          if (check != 0) {
            error("ECR image not found after push: petclinic/${params.SERVICE_NAME}:$IMAGE_TAG")
          } else {
            echo "Image verified in ECR: petclinic/${params.SERVICE_NAME}:$IMAGE_TAG"
          }
        }
      }
    }
  }

  post {
    success {
      echo "Successfully pushed ${params.SERVICE_NAME} to ECR"
    }
    failure {
      echo "Failed to push ${params.SERVICE_NAME}"
    }
  }
}
