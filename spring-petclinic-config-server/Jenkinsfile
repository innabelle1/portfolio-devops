pipeline {
  agent any

  parameters {
    string(name: 'SERVICE_NAME', defaultValue: 'config-server', description: 'Microservice name')
    string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag to pull from DockerHub')
  }

  environment {
    DOCKERHUB_REPO = "innabelle1/spring-petclinic-${params.SERVICE_NAME}"
    AWS_REGION     = "us-east-1"
    ECR_REGISTRY   = "701173654142.dkr.ecr.us-east-1.amazonaws.com"
    ECR_REPO       = "${ECR_REGISTRY}/petclinic/${params.SERVICE_NAME}"
  }

  stages {
    stage('Pull from DockerHub') {
      steps {
        sh 'docker pull $DOCKERHUB_REPO:$IMAGE_TAG'
      }
    }

    stage('Login to ECR') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr-creds']]) {
          sh '''
            aws ecr get-login-password --region $AWS_REGION |             docker login --username AWS --password-stdin $ECR_REGISTRY
          '''
        }
      }
    }

    stage('Tag Local Image for ECR') {
      steps {
        sh 'docker tag $DOCKERHUB_REPO:$IMAGE_TAG $ECR_REPO:$IMAGE_TAG'
      }
    }

    stage('Push Image to ECR') {
      steps {
        sh 'docker push $ECR_REPO:$IMAGE_TAG'
      }
    }

    stage('Verify Push') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr-creds']]) {
          sh '''
            aws ecr describe-images               --repository-name petclinic/${params.SERVICE_NAME}               --image-ids imageTag=$IMAGE_TAG               --region $AWS_REGION > /dev/null 2>&1 ||               (echo "ERROR: Image not found in ECR" && exit 1)
          '''
        }
      }
    }
  }

  post {
    success {
      echo "Successfully pushed ${params.SERVICE_NAME}:$IMAGE_TAG to ECR"
    }
    failure {
      echo "Failed to push ${params.SERVICE_NAME}:$IMAGE_TAG"
    }
  }
}
